// static/js/notify.js
// =======================================
// ‚öôÔ∏è Th√¥ng b√°o ng√¢n s√°ch th√°ng (BudgetNotify)
// T·ª± ƒë·ªông ƒë·ªìng b·ªô v·ªõi API backend Qu·ªëc:
//    GET /api/budgets/summary?month=YYYY-MM
// ---------------------------------------
// L∆∞u localStorage["budget_data"] = [{category, limit, spent}]
// v√† hi·ªÉn th·ªã c·∫£nh b√°o (v√†ng / ƒë·ªè / v∆∞·ª£t ng√¢n s√°ch).
// =======================================

const BudgetNotify = (() => {
  const STORAGE_KEY = "budget_notis_read";
  const qs = (s, r = document) => r.querySelector(s);
  const money = (n) => (Number(n) || 0).toLocaleString("vi-VN") + " ƒë";
  const monthLabel = (d = new Date()) => {
    const m = (d.getMonth() + 1).toString().padStart(2, "0");
    return `${m}/${d.getFullYear()}`;
  };

  const loadReadMap = () => {
    try {
      return JSON.parse(localStorage.getItem(STORAGE_KEY) || "{}");
    } catch {
      return {};
    }
  };
  const saveReadMap = (map) => {
    try {
      localStorage.setItem(STORAGE_KEY, JSON.stringify(map));
    } catch {}
  };

  // üß© G·ªçi API backend ƒë·ªÉ ƒë·ªìng b·ªô d·ªØ li·ªáu ng√¢n s√°ch
  async function syncFromAPI() {
    const now = new Date();
    const month = now.toISOString().slice(0, 7); // "YYYY-MM"

    try {
      const res = await fetch(
        `${BASE_API_URL}/api/budgets/summary?month=${month}`,
        {
          headers: {
            "Content-Type": "application/json",
            ...(localStorage.getItem("token")
              ? { Authorization: `Bearer ${localStorage.getItem("token")}` }
              : {}),
          },
          credentials: "include", // n·∫øu backend d√πng cookie JWT
        }
      );

      if (!res.ok) throw new Error("Kh√¥ng th·ªÉ t·∫£i d·ªØ li·ªáu ng√¢n s√°ch");
      const payload = await res.json();

      // ƒê·∫£m b·∫£o ƒë√∫ng c·∫•u tr√∫c backend Qu·ªëc tr·∫£ v·ªÅ
      const items = payload?.data?.items || [];

      // Map v·ªÅ format notify.js c·∫ßn
      const mapped = items.map((it) => ({
        category: it.category ?? "",
        limit: Number(it.amount ?? it.limit ?? 0),
        spent: Number(it.spent ?? it.used ?? 0),
      }));

      localStorage.setItem("budget_data", JSON.stringify(mapped));
    } catch (err) {
      console.error("[BudgetNotify] L·ªói ƒë·ªìng b·ªô d·ªØ li·ªáu:", err);
      localStorage.setItem("budget_data", "[]");
    }
  }

  // üß† Render th√¥ng b√°o ra giao di·ªán
  function render() {
    const list = qs("#notiList");
    const badge = qs("#notiBadge");
    const monthEl = qs("#notiMonth");
    if (!list || !badge) return;

    const stored = JSON.parse(localStorage.getItem("budget_data") || "[]");
    const readMap = loadReadMap();
    const notis = [];
    const thang = monthLabel();

    stored.forEach((b) => {
      const limit = Math.max(1, Number(b.limit) || 0);
      const spent = Number(b.spent) || 0;
      const pct = Math.round((spent / limit) * 100);
      const remain = limit - spent;
      let level = null,
        msg = null;

      if (pct >= 100) {
        const overBy = pct - 100;
        level = "over";
        msg = `B·∫°n ƒë√£ d√πng qu√° ${overBy}% (${money(
          Math.abs(remain)
        )}) ng√¢n s√°ch cho m·ª•c ${b.category} trong th√°ng ${thang}.`;
      } else if (pct >= 90) {
        level = "red";
        msg = `‚ö†Ô∏è C·∫£nh b√°o ƒë·ªè: M·ª•c ${b.category} ch·ªâ c√≤n ${money(
          remain
        )} trong ng√¢n s√°ch th√°ng ${thang}.`;
      } else if (pct >= 80) {
        const leftPct = 100 - pct;
        level = "yellow";
        msg = `‚ö†Ô∏è C·∫£nh b√°o v√†ng: B·∫°n ch·ªâ c√≤n ${leftPct}% (~${money(
          remain
        )}) cho m·ª•c ${b.category} trong th√°ng ${thang}.`;
      }

      if (level) {
        const id = `${b.category}|${level}|${thang}`;
        notis.push({ id, level, msg, pct, read: !!readMap[id] });
      }
    });

    // üßæ render danh s√°ch
    list.innerHTML = "";
    const unread = notis.filter((n) => !n.read).length;
    if (monthEl) monthEl.textContent = thang;

    if (unread === 0) {
      list.innerHTML = `<div class="text-muted small px-3 py-2">Ch∆∞a c√≥ th√¥ng b√°o.</div>`;
      badge.classList.add("d-none");
    } else {
      badge.textContent = unread;
      badge.classList.remove("d-none");
    }

    notis.forEach((n) => {
      const dotClass = n.read
        ? "dot-grey"
        : n.level === "yellow"
        ? "dot-yellow"
        : n.level === "red"
        ? "dot-red"
        : "dot-black";

      const unreadBg = n.read
        ? "noti-read"
        : n.level === "yellow"
        ? "noti-unread-yellow"
        : n.level === "red"
        ? "noti-unread-red"
        : "noti-unread-over";

      const title =
        n.level === "yellow"
          ? "C·∫£nh b√°o v√†ng"
          : n.level === "red"
          ? "C·∫£nh b√°o ƒë·ªè"
          : "Qu√° ng√¢n s√°ch";

      const item = document.createElement("div");
      item.className = `noti-item ${unreadBg}`;
      item.dataset.id = n.id;
      item.innerHTML = `
        <div class="noti-dot ${dotClass}"></div>
        <div>
          <div class="fw-semibold small">${title} ‚Ä¢ ${n.pct}%</div>
          <div class="small">${n.msg}</div>
        </div>
      `;
      list.appendChild(item);
    });

    // click ƒë·ªÉ ƒë√°nh d·∫•u ƒë√£ ƒë·ªçc
    list.onclick = (e) => {
      const el = e.target.closest(".noti-item");
      if (!el) return;
      const id = el.dataset.id;
      const map = loadReadMap();
      map[id] = true;
      saveReadMap(map);
      render();
    };
  }

  // üåê Public API
  async function init() {
    await syncFromAPI();
    render();
  }

  return { init, render };
})();

// ============================
// ‚úÖ C√°ch d√πng (g·ªçi 1 l·∫ßn khi load trang):
// document.addEventListener('DOMContentLoaded', () => {
//   BudgetNotify.init();
// });
